#! /bin/sh

# encoder_example - temporary wrapper script for .libs/encoder_example.exe
# Generated by ltmain.sh - GNU libtool 1.5.26 (1.1220.2.493 2008/02/01 16:58:18)
#
# The encoder_example program cannot be directly executed until all the libtool
# libraries that it depends on are installed.
#
# This wrapper script should never be moved out of the build directory.
# If it is, it will not operate correctly.

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed='f:/usr/bin/sed.exe -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'

# Be Bourne compatible (taken from Autoconf:_AS_BOURNE_COMPATIBLE).
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
fi
BIN_SH=xpg4; export BIN_SH # for Tru64
DUALCASE=1; export DUALCASE # for MKS sh

# The HP-UX ksh and POSIX shell print the target directory to stdout
# if CDPATH is set.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

relink_command="(cd  /lang/work/libvorbis/libvorbis-1.2.0.pack/examples;  LIBRARY_PATH=\"f:/lang/gcc335/usr/lib/gcc-lib/i386-pc-os2-emx/3.3.5;f:/lang/gcc335/usr/lib;f:/lang/emx/lib;f:/usr/lib;f:/usr/dll;\\\\lang\\\\os2tk45\\\\speech\\\\lib;f:\\\\lang\\\\os2tk45\\\\samples\\\\mm\\\\lib;f:\\\\lang\\\\os2tk45\\\\lib;f:\\\\lang\\\\os2tk45\\\\som\\\\lib;\";  export  LIBRARY_PATH;  {  test  -z  \"\${COMPILER_PATH+set}\"  ||  unset  COMPILER_PATH  ||  {  COMPILER_PATH=;  export  COMPILER_PATH;  };  };  {  test  -z  \"\${GCC_EXEC_PREFIX+set}\"  ||  unset  GCC_EXEC_PREFIX  ||  {  GCC_EXEC_PREFIX=;  export  GCC_EXEC_PREFIX;  };  };  {  test  -z  \"\${LIBPATH+set}\"  ||  unset  LIBPATH  ||  {  LIBPATH=;  export  LIBPATH;  };  };  PATH=\"f:\\\\lang\\\\gcc335\\\\usr\\\\i386-pc-os2-emx\\\\bin;f:\\\\lang\\\\gcc335\\\\usr\\\\bin;f:\\\\usr\\\\bin;f:\\\\usr\\\\sbin;E:\\\\MPTN\\\\BIN;E:\\\\IBMCOM;g:\\\\apps\\\\SECURITY\\\\bin;g:\\\\apps\\\\hpp;f:\\\\lang\\\\SIBYL\\\\BIN;f:\\\\lang\\\\os2tk45\\\\som\\\\common;f:\\\\lang\\\\os2tk45\\\\som\\\\bin;f:\\\\lang\\\\os2tk45\\\\bin;E:\\\\IBMGSK40\\\\BIN;E:\\\\IBMGSK\\\\BIN;f:\\\\NETSCAPE\\\\PROGRAM;E:\\\\IBMLAN\\\\NETPROG;E:\\\\MUGLIB;E:\\\\OS2;E:\\\\opendoc\\\\BIN;E:\\\\OS2\\\\SYSTEM;E:\\\\OS2\\\\MDOS\\\\WINHOS2;E:\\\\OS2\\\\INSTALL;E:\\\\;E:\\\\OS2\\\\MDOS;E:\\\\OS2\\\\APPS;E:\\\\JAVA11\\\\BIN;E:\\\\javaos2\\\\bin;E:\\\\MMOS2;E:\\\\NSC;e:\\\\tcpip\\\\bin;e:\\\\tcpip\\\\pcomos2;E:\\\\TCPIP\\\\UMAIL;f:\\\\lang\\\\emx\\\\bin;f:\\\\apps;E:\\\\IBM386FS;g:\\\\4os2;f:\\\\lang\\\\IBMCPP\\\\BIN;f:\\\\lang\\\\IBMCPP\\\\HELP;f:\\\\lang\\\\IBMCPP\\\\SMARTS\\\\SCRIPTS;F:\\\\LANG\\\\BCOS2\\\\BIN;F:\\\\APPS\\\\WARPIN;F:\\\\apps\\\\octave;f:\\\\lang\\\\fpc\\\\bin\\\\os2;f:\\\\lang\\\\vp21\\\\bin.os2;f:\\\\apps\\\\watchcat;f:\\\\lang\\\\cvs\\\\bin;g:\\\\apps\\\\SVDisk;e:\\\\os2\\\\fs\\\\tvfs;f:\\\\lang\\\\Perl\\\\bin;f:\\\\lang\\\\nasm;g:\\\\apps\\\\pmdiff;g:\\\\apps\\\\EMBLSH;g:\\\\apps\\\\VYPER;g:\\\\apps\\\\NDFS;\";  export  PATH;  gcc        -O20        -D__NO_MATH_INLINES        -fsigned-char        -DUSE_MEMORY_H        -o        \$progdir/\$file        encoder_example.o                ../lib/.libs/vorbisenc_dll.a        /lang/work/libvorbis/libvorbis-1.2.0.pack/lib/.libs/vorbis_dll.a        -L/usr/local/lib        ../lib/.libs/vorbis_dll.a        -logg            -L/lang/work/libvorbis/libvorbis-1.2.0.pack/lib/.libs    )  "

# This environment variable determines our operation mode.
if test "$libtool_install_magic" = "%%%MAGIC variable%%%"; then
  # install mode needs the following variable:
  notinst_deplibs=' ../lib/libvorbisenc.la /lang/work/libvorbis/libvorbis-1.2.0.pack/lib/libvorbis.la ../lib/libvorbis.la'
else
  # When we are sourced in execute mode, $file and $echo are already set.
  if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
    echo="print -r"
    file="$0"
    # Make sure echo works.
    if test "X$1" = X--no-reexec; then
      # Discard the --no-reexec flag, and continue.
      shift
    elif test "X`($echo '\t') 2>/dev/null`" = 'X\t'; then
      # Yippee, $echo works!
      :
    else
      # Restart under the correct shell, and then maybe $echo will work.
      exec /bin/sh "$0" --no-reexec ${1+"$@"}
    fi
  fi

  # Find the directory that this script lives in.
  thisdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
  test "x$thisdir" = "x$file" && thisdir=.

  # Follow symbolic links until we get to the real thisdir.
  file=`ls -ld "$file" | f:/usr/bin/sed.exe -n 's/.*-> //p'`
  while test -n "$file"; do
    destdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`

    # If there was a directory component, then change thisdir.
    if test "x$destdir" != "x$file"; then
      case "$destdir" in
      [\\/]* | [A-Za-z]:[\\/]*) thisdir="$destdir" ;;
      *) thisdir="$thisdir/$destdir" ;;
      esac
    fi

    file=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
    file=`ls -ld "$thisdir/$file" | f:/usr/bin/sed.exe -n 's/.*-> //p'`
  done

  # Try to get the absolute directory name.
  absdir=`cd "$thisdir" && pwd`
  test -n "$absdir" && thisdir="$absdir"

  program=lt-'encoder_example.exe'
  progdir="$thisdir/.libs"

  if test ! -f "$progdir/$program" || \
     { file=`ls -1dt "$progdir/$program" "$progdir/../$program" 2>/dev/null | f:/usr/bin/sed.exe 1q`; \
       test "X$file" != "X$progdir/$program"; }; then

    file="$$-$program"

    if test ! -d "$progdir"; then
      mkdir "$progdir"
    else
      rm -f "$progdir/$file"
    fi

    # relink executable if necessary
    if test -n "$relink_command"; then
      if relink_command_output=`eval $relink_command 2>&1`; then :
      else
	print -r "$relink_command_output" >&2
	rm -f "$progdir/$file"
	exit 1
      fi
    fi

    mv -f "$progdir/$file" "$progdir/$program" 2>/dev/null ||
    { rm -f "$progdir/$program";
      mv -f "$progdir/$file" "$progdir/$program"; }
    rm -f "$progdir/$file"
  fi

  if test -f "$progdir/$program"; then
    # Add the dll search path components to the executable PATH
    PATH=:/lang/work/libvorbis/libvorbis-1.2.0.pack/lib/.libs:$PATH

    if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
      # Run the actual program with our arguments.

      exec "$progdir\\$program" ${1+"$@"}

      $echo "$0: cannot exec $program $*"
      exit 1
    fi
  else
    # The program doesn't exist.
    $echo "$0: error: \`$progdir/$program' does not exist" 1>&2
    $echo "This script is just a wrapper for $program." 1>&2
    print -r "See the libtool documentation for more information." 1>&2
    exit 1
  fi
fi
